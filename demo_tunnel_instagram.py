#!/usr/bin/env python3
"""
D√©monstration du Tunnel Instagram Gratuit
Script simple qui montre comment utiliser le tunnel une fois configur√©
"""

import requests
import json
import tempfile
import os
from PIL import Image
from datetime import datetime

API_BASE = "http://localhost:8001"
WEBHOOK_URL = "https://insta-auto-fix.preview.emergentagent.com/api/webhook"

def create_demo_image():
    """Cr√©e une image de d√©monstration pour le test"""
    # Cr√©er une image simple avec PIL
    img = Image.new('RGB', (800, 600), color='lightblue')
    
    # Sauvegarder dans un fichier temporaire
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
    img.save(temp_file.name, 'JPEG')
    temp_file.close()
    
    return temp_file.name

def test_webhook_publication():
    """Test une publication via webhook avec image g√©n√©r√©e"""
    print("üöÄ D√âMONSTRATION TUNNEL INSTAGRAM GRATUIT")
    print("=" * 50)
    
    # V√©rifier si utilisateur connect√©
    try:
        response = requests.get(f"{API_BASE}/api/health")
        data = response.json()
        users_count = data['database']['users_count']
        
        if users_count == 0:
            print("‚ùå Aucun utilisateur connect√©")
            print("üîë Connectez-vous d'abord sur http://localhost:3000")
            return False
            
        print(f"‚úÖ {users_count} utilisateur(s) connect√©(s)")
        
    except Exception as e:
        print(f"‚ùå Erreur connexion: {e}")
        return False
    
    # Cr√©er une image de test
    print("üñºÔ∏è Cr√©ation d'une image de test...")
    demo_image = create_demo_image()
    
    try:
        # Pr√©parer les donn√©es
        json_data = {
            "title": "üß™ Test Tunnel Instagram Gratuit",
            "description": f"Test automatique du tunnel Instagram le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}. Si vous voyez ce post sur @logicamp_berger, le tunnel fonctionne parfaitement ! üéâ",
            "url": "https://gizmobbs.com/tunnel-test",
            "store": "gizmobbs"  # Publiera sur @logicamp_berger
        }
        
        print(f"üìù Donn√©es de test:")
        print(f"   Store: {json_data['store']} ‚Üí @logicamp_berger")
        print(f"   Title: {json_data['title']}")
        
        # Faire la requ√™te webhook
        print(f"üåê Envoi vers webhook: {WEBHOOK_URL}")
        
        with open(demo_image, 'rb') as img_file:
            files = {'image': img_file}
            data = {'json_data': json.dumps(json_data)}
            
            response = requests.post(WEBHOOK_URL, files=files, data=data, timeout=30)
        
        print(f"üì° R√©ponse webhook: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ SUCC√àS - Webhook trait√©!")
            
            # Afficher les d√©tails
            if 'data' in result:
                webhook_data = result['data']
                print(f"   Image: {webhook_data.get('image_filename')}")
                print(f"   Taille: {webhook_data.get('image_size_bytes')} bytes")
                
                # R√©sultats de publication
                if 'publication_results' in webhook_data:
                    pub_results = webhook_data['publication_results']
                    for pub_result in pub_results:
                        status = pub_result.get('status', 'unknown')
                        message = pub_result.get('message', 'No message')
                        print(f"   Publication: {status} - {message}")
                        
                        if status == 'success':
                            platforms = pub_result.get('platforms', [])
                            for platform in platforms:
                                platform_name = platform.get('platform', 'unknown')
                                post_id = platform.get('post_id', 'N/A')
                                print(f"      ‚úÖ {platform_name}: {post_id}")
            
            return True
            
        else:
            print(f"‚ùå Erreur webhook: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   D√©tail: {error_data.get('detail', 'Unknown error')}")
            except:
                print(f"   R√©ponse: {response.text[:200]}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚è±Ô∏è Timeout - La publication peut prendre du temps")
        print("   V√©rifiez Instagram dans quelques minutes")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur publication: {e}")
        return False
        
    finally:
        # Nettoyer l'image temporaire
        if os.path.exists(demo_image):
            os.unlink(demo_image)

def show_tunnel_info():
    """Affiche les informations du tunnel"""
    print("\nüìã INFORMATIONS DU TUNNEL:")
    print(f"   URL: {WEBHOOK_URL}")
    print("   M√©thode: POST (multipart/form-data)")
    print("   Champs: image (fichier) + json_data (JSON)")
    print("   Target: @logicamp_berger sur Instagram")
    
    print("\nüéØ MAGASINS DISPONIBLES:")
    stores = ["outdoor", "gizmobbs", "gimobbs", "logicantiq", "ma-boutique"]
    for store in stores:
        print(f"   - {store} ‚Üí @logicamp_berger")
    
    print(f"\nüåê Interface web: http://localhost:3000")

def main():
    """D√©monstration principale"""
    show_tunnel_info()
    
    print("\n" + "=" * 50)
    response = input("Voulez-vous tester le tunnel maintenant ? (y/N): ")
    
    if response.lower() in ['y', 'yes', 'o', 'oui']:
        success = test_webhook_publication()
        
        if success:
            print("\nüéâ TUNNEL INSTAGRAM OP√âRATIONNEL!")
            print("   V√©rifiez @logicamp_berger sur Instagram")
            print("   pour voir votre post de test")
        else:
            print("\n‚ö†Ô∏è Probl√®me d√©tect√©")
            print("   Ex√©cutez: python3 instagram_tunnel_fix.py")
            print("   pour diagnostiquer")
    else:
        print("\nüí° Pour tester plus tard:")
        print("   python3 demo_tunnel_instagram.py")

if __name__ == "__main__":
    main()