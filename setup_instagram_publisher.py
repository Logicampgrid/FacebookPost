#!/usr/bin/env python3
"""
Script de configuration pour Instagram Auto Publisher
V√©rifie les d√©pendances et la configuration
"""

import os
import sys
import subprocess
import asyncio
from pathlib import Path

def check_dependencies():
    """V√©rifie et installe les d√©pendances n√©cessaires"""
    print("üîç V√©rification des d√©pendances...")
    
    required_packages = [
        'Pillow',
        'motor', 
        'requests',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.lower().replace('-', '_'))
            print(f"‚úÖ {package} - OK")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} - MANQUANT")
    
    if missing_packages:
        print(f"\nüì¶ Installation des packages manquants...")
        try:
            subprocess.check_call([
                sys.executable, '-m', 'pip', 'install'
            ] + missing_packages)
            print("‚úÖ Installation r√©ussie!")
        except subprocess.CalledProcessError:
            print("‚ùå Erreur d'installation")
            return False
    
    return True

def check_ffmpeg():
    """V√©rifie la pr√©sence de FFmpeg"""
    print("\nüé¨ V√©rification de FFmpeg...")
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ FFmpeg - OK")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ùå FFmpeg non trouv√©")
    print("üì¶ Installation requise: apt-get install ffmpeg")
    return False

def check_environment():
    """V√©rifie les variables d'environnement"""
    print("\nüîê V√©rification de l'environnement...")
    
    required_env = [
        'MONGO_URL',
        'FACEBOOK_GRAPH_URL'
    ]
    
    missing_env = []
    for env_var in required_env:
        if not os.getenv(env_var):
            missing_env.append(env_var)
            print(f"‚ùå {env_var} - MANQUANT")
        else:
            print(f"‚úÖ {env_var} - OK")
    
    if missing_env:
        print(f"\n‚ö†Ô∏è Variables d'environnement manquantes:")
        for var in missing_env:
            print(f"  export {var}=<valeur>")
        return False
    
    return True

async def test_database_connection():
    """Test la connexion √† la base de donn√©es"""
    print("\nüóÑÔ∏è Test de connexion MongoDB...")
    try:
        import motor.motor_asyncio
        from dotenv import load_dotenv
        
        load_dotenv()
        
        MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017")
        client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_URL)
        db = client.meta_posts
        
        # Test simple
        await db.users.find_one()
        print("‚úÖ Connexion MongoDB - OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Connexion MongoDB - ERREUR: {str(e)}")
        return False

def create_example_script():
    """Cr√©e un script d'exemple"""
    example_script = '''#!/bin/bash
# Exemple d'utilisation d'Instagram Auto Publisher

echo "üì± Publication Instagram - Exemples"

# Publication d'une image unique
echo "1Ô∏è‚É£ Publication image unique..."
python3 /app/instagram_auto_publisher.py \\
    --file "/path/to/image.webp" \\
    --caption "Belle photo de nos chiots Berger Blanc Suisse! üêï" \\
    --hashtags "#bergerblancsuisse #chiots #elevage #chiens"

# Publication d'une vid√©o
echo "2Ô∏è‚É£ Publication vid√©o..."
python3 /app/instagram_auto_publisher.py \\
    --file "/path/to/video.mov" \\
    --caption "Nos chiots en plein jeu! üé•" \\
    --hashtags "#video #chiots #jeu #bergerblancsuisse"

# Publication par lots
echo "3Ô∏è‚É£ Publication par lots..."
python3 /app/instagram_auto_publisher.py \\
    --batch "/path/to/photos_directory" \\
    --caption "Collection de photos de nos chiens" \\
    --hashtags "#collection #bergerblancsuisse #photos"

# Test sans publication
echo "4Ô∏è‚É£ Mode test..."
python3 /app/instagram_auto_publisher.py \\
    --file "/path/to/test.jpg" \\
    --caption "Test" \\
    --dry-run

echo "‚úÖ Exemples termin√©s!"
'''
    
    with open('/app/example_instagram_usage.sh', 'w') as f:
        f.write(example_script)
    
    os.chmod('/app/example_instagram_usage.sh', 0o755)
    print("‚úÖ Script d'exemple cr√©√©: /app/example_instagram_usage.sh")

def main():
    """Fonction principale de setup"""
    print("üöÄ Configuration Instagram Auto Publisher")
    print("=" * 50)
    
    all_checks_passed = True
    
    # V√©rifications
    if not check_dependencies():
        all_checks_passed = False
    
    if not check_ffmpeg():
        all_checks_passed = False
        print("‚ÑπÔ∏è FFmpeg requis uniquement pour conversion vid√©o")
    
    if not check_environment():
        all_checks_passed = False
    
    # Test base de donn√©es
    try:
        db_ok = asyncio.run(test_database_connection())
        if not db_ok:
            all_checks_passed = False
    except Exception as e:
        print(f"‚ùå Erreur test DB: {str(e)}")
        all_checks_passed = False
    
    # Cr√©ation dossiers
    print("\nüìÅ Cr√©ation des dossiers...")
    os.makedirs('/app/logs', exist_ok=True)
    os.makedirs('/tmp', exist_ok=True)
    print("‚úÖ Dossiers cr√©√©s")
    
    # Script d'exemple
    create_example_script()
    
    # R√©sum√©
    print("\n" + "=" * 50)
    if all_checks_passed:
        print("üéâ Configuration termin√©e avec succ√®s!")
        print("\nüìã Utilisation:")
        print("  python3 /app/instagram_auto_publisher.py --help")
        print("  bash /app/example_instagram_usage.sh")
    else:
        print("‚ö†Ô∏è Configuration incompl√®te - V√©rifiez les erreurs ci-dessus")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)