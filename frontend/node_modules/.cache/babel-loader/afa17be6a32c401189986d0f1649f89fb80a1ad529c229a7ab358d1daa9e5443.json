{"ast":null,"code":"import{useState,useEffect}from'react';import axios from'axios';const API_BASE=process.env.REACT_APP_BACKEND_URL;// Hook personnalisé pour détecter et récupérer les métadonnées des liens\nexport const useLinkDetection=function(text){let debounceMs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1000;const[detectedLinks,setDetectedLinks]=useState([]);const[loading,setLoading]=useState(false);const[removedLinks,setRemovedLinks]=useState(new Set());useEffect(()=>{if(!text||text.trim().length===0){setDetectedLinks([]);return;}const timer=setTimeout(async()=>{try{setLoading(true);const response=await axios.post(\"\".concat(API_BASE,\"/api/text/extract-links\"),{text:text});const newLinks=response.data.links||[];// Filtrer les liens supprimés manuellement\nconst filteredLinks=newLinks.filter(link=>!removedLinks.has(link.url));setDetectedLinks(filteredLinks);}catch(error){console.error('Error detecting links:',error);setDetectedLinks([]);}finally{setLoading(false);}},debounceMs);return()=>clearTimeout(timer);},[text,debounceMs,removedLinks]);const removeLink=url=>{setRemovedLinks(prev=>new Set([...prev,url]));setDetectedLinks(prev=>prev.filter(link=>link.url!==url));};const resetRemovedLinks=()=>{setRemovedLinks(new Set());};return{detectedLinks,loading,removeLink,resetRemovedLinks};};// Utilitaire pour détecter les URLs dans du texte (côté client)\nexport const detectUrlsInText=text=>{const urlRegex=/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/g;return text.match(urlRegex)||[];};// Hook pour prévisualiser un lien unique\nexport const useLinkPreview=url=>{const[linkData,setLinkData]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);useEffect(()=>{if(!url){setLinkData(null);setError(null);return;}const fetchLinkPreview=async()=>{try{setLoading(true);setError(null);const response=await axios.post(\"\".concat(API_BASE,\"/api/links/preview\"),{url:url});setLinkData(response.data.metadata);}catch(err){var _err$response,_err$response$data;console.error('Error fetching link preview:',err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.detail)||'Erreur lors de la récupération de l\\'aperçu');setLinkData(null);}finally{setLoading(false);}};fetchLinkPreview();},[url]);return{linkData,loading,error};};","map":{"version":3,"names":["useState","useEffect","axios","API_BASE","process","env","REACT_APP_BACKEND_URL","useLinkDetection","text","debounceMs","arguments","length","undefined","detectedLinks","setDetectedLinks","loading","setLoading","removedLinks","setRemovedLinks","Set","trim","timer","setTimeout","response","post","concat","newLinks","data","links","filteredLinks","filter","link","has","url","error","console","clearTimeout","removeLink","prev","resetRemovedLinks","detectUrlsInText","urlRegex","match","useLinkPreview","linkData","setLinkData","setError","fetchLinkPreview","metadata","err","_err$response","_err$response$data","detail"],"sources":["/app/frontend/src/hooks/useLinkDetection.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst API_BASE = process.env.REACT_APP_BACKEND_URL;\n\n// Hook personnalisé pour détecter et récupérer les métadonnées des liens\nexport const useLinkDetection = (text, debounceMs = 1000) => {\n  const [detectedLinks, setDetectedLinks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [removedLinks, setRemovedLinks] = useState(new Set());\n\n  useEffect(() => {\n    if (!text || text.trim().length === 0) {\n      setDetectedLinks([]);\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      try {\n        setLoading(true);\n        \n        const response = await axios.post(`${API_BASE}/api/text/extract-links`, {\n          text: text\n        });\n\n        const newLinks = response.data.links || [];\n        \n        // Filtrer les liens supprimés manuellement\n        const filteredLinks = newLinks.filter(link => !removedLinks.has(link.url));\n        \n        setDetectedLinks(filteredLinks);\n      } catch (error) {\n        console.error('Error detecting links:', error);\n        setDetectedLinks([]);\n      } finally {\n        setLoading(false);\n      }\n    }, debounceMs);\n\n    return () => clearTimeout(timer);\n  }, [text, debounceMs, removedLinks]);\n\n  const removeLink = (url) => {\n    setRemovedLinks(prev => new Set([...prev, url]));\n    setDetectedLinks(prev => prev.filter(link => link.url !== url));\n  };\n\n  const resetRemovedLinks = () => {\n    setRemovedLinks(new Set());\n  };\n\n  return {\n    detectedLinks,\n    loading,\n    removeLink,\n    resetRemovedLinks\n  };\n};\n\n// Utilitaire pour détecter les URLs dans du texte (côté client)\nexport const detectUrlsInText = (text) => {\n  const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/g;\n  return text.match(urlRegex) || [];\n};\n\n// Hook pour prévisualiser un lien unique\nexport const useLinkPreview = (url) => {\n  const [linkData, setLinkData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!url) {\n      setLinkData(null);\n      setError(null);\n      return;\n    }\n\n    const fetchLinkPreview = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await axios.post(`${API_BASE}/api/links/preview`, {\n          url: url\n        });\n\n        setLinkData(response.data.metadata);\n      } catch (err) {\n        console.error('Error fetching link preview:', err);\n        setError(err.response?.data?.detail || 'Erreur lors de la récupération de l\\'aperçu');\n        setLinkData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchLinkPreview();\n  }, [url]);\n\n  return { linkData, loading, error };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}