#!/usr/bin/env python3
"""
Instagram Tunnel Fix - R√©solution des probl√®mes de publication Instagram

Ce script diagnostique et corrige les probl√®mes de publication Instagram
pour cr√©er un "tunnel gratuit" de publication.
"""

import requests
import json
import sys
import os
from datetime import datetime

# Configuration
API_BASE = "http://localhost:8001"
BACKEND_URL = "https://social-media-bridge.preview.emergentagent.com"

def test_connection():
    """Test la connexion au backend"""
    try:
        response = requests.get(f"{API_BASE}/api/health")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Backend connect√©")
            print(f"   Status: {data['status']}")
            print(f"   MongoDB: {data['mongodb']}")
            print(f"   Utilisateurs: {data['database']['users_count']}")
            return True
        else:
            print(f"‚ùå Backend error: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Connexion error: {e}")
        return False

def test_instagram_diagnosis():
    """Test le diagnostic Instagram complet"""
    try:
        response = requests.get(f"{API_BASE}/api/debug/instagram-complete-diagnosis")
        if response.status_code == 200:
            data = response.json()
            print("\nüì± DIAGNOSTIC INSTAGRAM:")
            print(f"   Status: {data['status']}")
            print(f"   Utilisateur trouv√©: {data['authentication']['user_found']}")
            print(f"   Business Managers: {data['authentication']['business_managers_count']}")
            print(f"   Comptes Instagram: {len(data['instagram_accounts'])}")
            
            if data['issues']:
                print("   ‚ùå Probl√®mes:")
                for issue in data['issues']:
                    print(f"      {issue}")
            
            if data['recommendations']:
                print("   üí° Recommandations:")
                for rec in data['recommendations']:
                    print(f"      {rec}")
            
            return data
        else:
            print(f"‚ùå Instagram diagnosis error: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Instagram diagnosis error: {e}")
        return None

def test_webhook_endpoint():
    """Test l'endpoint webhook pour publication automatique"""
    try:
        response = requests.get(f"{API_BASE}/api/webhook")
        if response.status_code == 200:
            data = response.json()
            print("\nüåê WEBHOOK ENDPOINT:")
            print("   ‚úÖ Endpoint disponible")
            print(f"   URL: {BACKEND_URL}/api/webhook")
            print("   M√©thode: POST (multipart/form-data)")
            print("   Champs requis: image, json_data")
            
            if 'available_stores' in data:
                print(f"   Magasins support√©s: {', '.join(data['available_stores'])}")
            
            return True
        else:
            print(f"‚ùå Webhook error: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return False

def check_instagram_configuration():
    """V√©rifie la configuration Instagram dans le mapping des magasins"""
    try:
        response = requests.get(f"{API_BASE}/api/webhook")
        if response.status_code == 200:
            data = response.json()
            shop_mapping = data.get('shop_mapping', {})
            
            print("\n‚öôÔ∏è CONFIGURATION INSTAGRAM:")
            instagram_shops = []
            for shop, config in shop_mapping.items():
                if 'instagram' in config.get('platforms', []):
                    instagram_shops.append(shop)
                    print(f"   ‚úÖ {shop}:")
                    print(f"      Instagram: @{config.get('instagram_username', 'N/A')}")
                    print(f"      Plateformes: {', '.join(config.get('platforms', []))}")
            
            if instagram_shops:
                print(f"\n‚úÖ {len(instagram_shops)} magasins configur√©s pour Instagram")
                return instagram_shops
            else:
                print("\n‚ùå Aucun magasin configur√© pour Instagram")
                return []
        else:
            return []
    except Exception as e:
        print(f"‚ùå Configuration error: {e}")
        return []

def create_test_publication():
    """Cr√©e une publication de test pour v√©rifier le tunnel Instagram"""
    print("\nüß™ TEST DE PUBLICATION (simulation):")
    print("   Pour tester la publication Instagram, vous devez:")
    print("   1. Vous connecter via l'interface web (http://localhost:3000)")
    print("   2. Connecter votre compte Facebook Business Manager")
    print("   3. V√©rifier que @logicamp_berger est accessible")
    print("   4. Utiliser l'endpoint webhook ou l'interface pour publier")
    
    # Exemple de requ√™te webhook
    example_curl = f"""
    curl -X POST "{BACKEND_URL}/api/webhook" \\
      -F "image=@/path/to/image.jpg" \\
      -F 'json_data={{"title":"Test Instagram","description":"Test de publication via tunnel gratuit","url":"https://example.com","store":"gizmobbs"}}'
    """
    
    print(f"\nüìù Exemple de requ√™te webhook:")
    print(example_curl)

def main():
    """Fonction principale de diagnostic et correction"""
    print("üöÄ INSTAGRAM TUNNEL - DIAGNOSTIC ET CORRECTION")
    print("=" * 50)
    
    # Test 1: Connexion backend
    if not test_connection():
        print("‚ùå Impossible de continuer sans connexion backend")
        sys.exit(1)
    
    # Test 2: Diagnostic Instagram
    instagram_status = test_instagram_diagnosis()
    
    # Test 3: Endpoint webhook
    webhook_ok = test_webhook_endpoint()
    
    # Test 4: Configuration Instagram
    instagram_shops = check_instagram_configuration()
    
    # Test 5: Exemple de publication
    create_test_publication()
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DU DIAGNOSTIC:")
    print(f"   Backend: ‚úÖ")
    print(f"   Webhook: {'‚úÖ' if webhook_ok else '‚ùå'}")
    print(f"   Configuration Instagram: {'‚úÖ' if instagram_shops else '‚ùå'}")
    print(f"   Magasins avec Instagram: {len(instagram_shops)}")
    
    if instagram_status and not instagram_status['authentication']['user_found']:
        print("\nüîë √âTAPE SUIVANTE REQUISE:")
        print("   Connectez-vous via http://localhost:3000")
        print("   avec votre compte Facebook Business Manager")
        print("   pour activer le tunnel Instagram gratuit!")
    
    print(f"\nüåê URL du tunnel: {BACKEND_URL}/api/webhook")

if __name__ == "__main__":
    main()