#!/usr/bin/env python3
"""
Script de test pour Instagram Auto Publisher
D√©montre toutes les fonctionnalit√©s avec des exemples
"""

import os
import asyncio
import tempfile
import shutil
from PIL import Image
from pathlib import Path

def create_test_image(path: str, format_ext: str = 'jpg'):
    """Cr√©e une image de test"""
    # Cr√©er une image simple 800x600
    img = Image.new('RGB', (800, 600), color=(70, 130, 180))
    
    # Ajouter du texte (simulation)
    try:
        from PIL import ImageDraw, ImageFont
        draw = ImageDraw.Draw(img)
        
        # Essayer d'utiliser une police par d√©faut
        try:
            font = ImageFont.load_default()
        except:
            font = None
        
        text = f"Test Image\nFormat: {format_ext.upper()}\nSize: 800x600"
        draw.text((50, 50), text, fill=(255, 255, 255), font=font)
        
    except ImportError:
        # Pas de PIL compl√®te, juste une image unie
        pass
    
    # Sauvegarder selon le format
    if format_ext.lower() == 'webp':
        img.save(path, 'WEBP', quality=90)
    elif format_ext.lower() == 'png':
        img.save(path, 'PNG')
    else:
        img.save(path, 'JPEG', quality=95)
    
    print(f"‚úÖ Image de test cr√©√©e: {path}")

def create_test_video(path: str, duration: int = 5):
    """Cr√©e une vid√©o de test avec FFmpeg"""
    try:
        import subprocess
        
        # Cr√©er une vid√©o de test simple (√©cran de couleur)
        cmd = [
            'ffmpeg', '-y',
            '-f', 'lavfi', 
            '-i', f'color=c=blue:size=640x480:duration={duration}',
            '-c:v', 'libx264',
            '-t', str(duration),
            path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0 and os.path.exists(path):
            print(f"‚úÖ Vid√©o de test cr√©√©e: {path}")
            return True
        else:
            print(f"‚ùå Erreur cr√©ation vid√©o: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Impossible de cr√©er la vid√©o de test: {str(e)}")
        return False

def test_media_detection():
    """Test la d√©tection de types de m√©dias"""
    print("\nüîç TEST D√âTECTION DE M√âDIAS")
    print("=" * 40)
    
    from instagram_auto_publisher import InstagramPublisher
    
    publisher = InstagramPublisher()
    
    # Test avec diff√©rents formats
    test_cases = [
        ('test.jpg', 'image'),
        ('test.webp', 'image'),
        ('test.mp4', 'video'),
        ('test.mov', 'video'),
        ('test.png', 'image'),
    ]
    
    with tempfile.TemporaryDirectory() as temp_dir:
        for filename, expected_type in test_cases:
            test_path = os.path.join(temp_dir, filename)
            
            # Cr√©er un fichier vide pour le test
            Path(test_path).touch()
            
            try:
                media_type, extension = publisher.detect_media_type(test_path)
                status = "‚úÖ" if media_type == expected_type else "‚ùå"
                print(f"{status} {filename} ‚Üí {media_type} (attendu: {expected_type})")
            except Exception as e:
                print(f"‚ùå {filename} ‚Üí Erreur: {str(e)}")

def test_image_conversion():
    """Test la conversion d'images"""
    print("\nüîÑ TEST CONVERSION D'IMAGES")
    print("=" * 40)
    
    from instagram_auto_publisher import InstagramPublisher
    
    publisher = InstagramPublisher()
    
    with tempfile.TemporaryDirectory() as temp_dir:
        # Cr√©er des images de test dans diff√©rents formats
        test_formats = ['jpg', 'webp', 'png']
        
        for format_ext in test_formats:
            input_path = os.path.join(temp_dir, f'test_input.{format_ext}')
            output_path = os.path.join(temp_dir, f'test_output_{format_ext}.jpg')
            
            # Cr√©er l'image de test
            create_test_image(input_path, format_ext)
            
            # Tester la conversion
            print(f"üîÑ Test conversion {format_ext.upper()} ‚Üí JPEG...")
            
            try:
                result = asyncio.run(publisher.convert_image(input_path, output_path))
                if result and os.path.exists(output_path):
                    original_size = os.path.getsize(input_path)
                    converted_size = os.path.getsize(output_path)
                    print(f"‚úÖ Conversion r√©ussie: {original_size} ‚Üí {converted_size} bytes")
                else:
                    print(f"‚ùå Conversion √©chou√©e")
            except Exception as e:
                print(f"‚ùå Erreur conversion: {str(e)}")

def test_video_conversion():
    """Test la conversion de vid√©os"""
    print("\nüé¨ TEST CONVERSION DE VID√âOS")
    print("=" * 40)
    
    from instagram_auto_publisher import InstagramPublisher
    
    publisher = InstagramPublisher()
    
    with tempfile.TemporaryDirectory() as temp_dir:
        input_path = os.path.join(temp_dir, 'test_input.mp4')
        output_path = os.path.join(temp_dir, 'test_output.mp4')
        
        # Cr√©er une vid√©o de test
        if create_test_video(input_path, duration=3):
            print(f"üîÑ Test conversion vid√©o...")
            
            try:
                result = asyncio.run(publisher.convert_video(input_path, output_path))
                if result and os.path.exists(output_path):
                    original_size = os.path.getsize(input_path)
                    converted_size = os.path.getsize(output_path)
                    print(f"‚úÖ Conversion vid√©o r√©ussie: {original_size} ‚Üí {converted_size} bytes")
                else:
                    print(f"‚ùå Conversion vid√©o √©chou√©e")
            except Exception as e:
                print(f"‚ùå Erreur conversion vid√©o: {str(e)}")
        else:
            print("‚ö†Ô∏è Impossible de cr√©er vid√©o de test, FFmpeg requis")

def test_caption_composition():
    """Test la composition des captions"""
    print("\nüìù TEST COMPOSITION CAPTIONS")
    print("=" * 40)
    
    from instagram_auto_publisher import InstagramPublisher
    
    publisher = InstagramPublisher()
    
    test_cases = [
        ("Simple caption", "#test", "Simple caption\n\n#test"),
        ("Caption avec √©mojis üêï", "#chien #mignon", "Caption avec √©mojis üêï\n\n#chien #mignon"),
        ("", "#justhash", "#justhash"),
        ("Caption seule", "", "Caption seule"),
        ("A" * 2300, "#long", "A" * 2197 + "..."),  # Test troncature
    ]
    
    for caption, hashtags, expected in test_cases:
        result = publisher.compose_caption(caption, hashtags)
        status = "‚úÖ" if len(result) <= 2200 else "‚ùå"
        print(f"{status} Caption: {len(result)} chars")
        if len(expected) < 100:  # Afficher seulement les courtes
            print(f"   R√©sultat: '{result}'")

def show_authentication_guide():
    """Affiche un guide pour l'authentification"""
    print("\nüîê AUTHENTIFICATION REQUISE")
    print("=" * 50)
    print("Pour utiliser le script en mode r√©el, vous devez :")
    print()
    print("1Ô∏è‚É£  Ouvrir l'application web :")
    print("   http://localhost:3000")
    print()
    print("2Ô∏è‚É£  Se connecter avec Facebook/Meta Business")
    print()
    print("3Ô∏è‚É£  S√©lectionner le Business Manager contenant")
    print("   la page 'Le Berger Blanc Suisse'")
    print()
    print("4Ô∏è‚É£  Une fois connect√©, le script pourra publier :")
    print("   python3 instagram_auto_publisher.py --file image.jpg")
    print()
    print("üí° En attendant, utilisez --dry-run pour tester :")
    print("   python3 instagram_auto_publisher.py --file test.jpg --dry-run")

def main():
    """Fonction principale de test"""
    print("üß™ TESTS INSTAGRAM AUTO PUBLISHER")
    print("=" * 50)
    
    # Tests des fonctionnalit√©s
    test_media_detection()
    test_image_conversion()
    test_video_conversion()
    test_caption_composition()
    
    # Guide d'authentification
    show_authentication_guide()
    
    print("\n" + "=" * 50)
    print("‚úÖ Tests termin√©s ! Le script est pr√™t √† l'emploi.")
    print("üìñ Consultez INSTAGRAM_AUTO_PUBLISHER_README.md pour plus d'infos")

if __name__ == "__main__":
    main()