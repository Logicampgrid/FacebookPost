#!/usr/bin/env python3
"""
Test simple pour v√©rifier que les corrections FTP fonctionnent
en utilisant un des fichiers webhook existants
"""

import os
import sys
import asyncio

# Ajouter le r√©pertoire backend au path
sys.path.insert(0, '/app/backend')

async def test_existing_webhook_file():
    """Test avec un fichier webhook existant"""
    
    print("üîç RECHERCHE D'UN FICHIER WEBHOOK EXISTANT...")
    
    # Chercher des fichiers webhook existants
    upload_dirs = [
        "/app/backend/uploads",
        "/app/backend/C:\\gizmobbs\\uploads"
    ]
    
    webhook_file = None
    for upload_dir in upload_dirs:
        if os.path.exists(upload_dir):
            for filename in os.listdir(upload_dir):
                if filename.startswith("webhook_") and filename.endswith((".jpg", ".png")):
                    webhook_file = os.path.join(upload_dir, filename)
                    break
            if webhook_file:
                break
    
    if not webhook_file:
        print("‚ùå Aucun fichier webhook trouv√© pour le test")
        return False
    
    print(f"‚úÖ Fichier webhook trouv√©: {webhook_file}")
    file_size = os.path.getsize(webhook_file)
    print(f"üìè Taille: {file_size} bytes")
    
    # Importer les fonctions apr√®s avoir d√©fini FORCE_FTP
    os.environ["FORCE_FTP"] = "true"
    from server import ensure_file_on_ftp
    
    print(f"\nüì§ TEST UPLOAD FTP avec FORCE_FTP=true...")
    
    # Tester notre fonction utilitaire
    success, result, error = await ensure_file_on_ftp(webhook_file, "fichier webhook test")
    
    print(f"\nüìä R√âSULTAT:")
    print(f"- Succ√®s: {success}")
    if success:
        print(f"- URL/Path r√©sultat: {result}")
        if result and result.startswith("https://"):
            print(f"‚úÖ URL HTTPS obtenue - CORRECTION R√âUSSIE!")
            return True
        else:
            print(f"‚ö†Ô∏è Chemin local retourn√© au lieu d'URL HTTPS")
            return False
    else:
        print(f"‚ùå Erreur: {error}")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(test_existing_webhook_file())
        print(f"\nüèÅ TEST {'R√âUSSI' if result else '√âCHOU√â'}")
    except Exception as e:
        print(f"üí• ERREUR DURANT LE TEST: {e}")
        import traceback
        traceback.print_exc()